//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("logos")
    }
    fn table_name(&self) -> &str {
        "user"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i64,
    pub application: i32,
    pub category: i64,
    pub family: i64,
    pub properties: Json,
    pub information: Json,
    pub marks: Json,
    pub gender: i16,
    pub state: i32,
    pub joined: DateTime,
    pub updated: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Application,
    Category,
    Family,
    Properties,
    Information,
    Marks,
    Gender,
    State,
    Joined,
    Updated,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::Application => ColumnType::Integer.def(),
            Self::Category => ColumnType::BigInteger.def(),
            Self::Family => ColumnType::BigInteger.def(),
            Self::Properties => ColumnType::JsonBinary.def(),
            Self::Information => ColumnType::Json.def(),
            Self::Marks => ColumnType::Json.def(),
            Self::Gender => ColumnType::SmallInteger.def(),
            Self::State => ColumnType::Integer.def(),
            Self::Joined => ColumnType::DateTime.def(),
            Self::Updated => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
