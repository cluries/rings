// pub mod jwt;
// pub mod profile;
// pub mod signature;
// pub mod signator;
// pub mod examples;


// use axum::http::request::Parts;
// use axum::{Router, extract::Request, response::Response};
// use std::future::Future;
// use std::pin::Pin;
// use std::collections::HashMap;
// use axum::http::Method;

// /// 中间件 trait，设计为 dyn compatible
// pub trait Middleware: Send + Sync {
//     /// 判断中间件是否应该处理这个请求
//     fn focus(&self, parts: &Parts) -> bool;

//     /// 中间件优先级，数值越大优先级越高
//     fn priority(&self) -> i32;

//     /// 处理请求的核心方法
//     fn call(&self, request: Request) -> Pin<Box<dyn Future<Output = Result<Request, Response>> + Send + '_>>;

//     /// 可选：中间件名称，用于调试和日志
//     fn name(&self) -> &'static str {
//         "UnnamedMiddleware"
//     }

//     /// 可选：路径匹配模式
//     fn path_pattern(&self) -> Option<&str> {
//         None
//     }

//     /// 可选：HTTP 方法过滤
//     fn methods(&self) -> Option<&[Method]> {
//         None
//     }
// }

// /// 中间件执行上下文
// #[derive(Debug, Clone)]
// pub struct MiddlewareContext {
//     pub request_id: String,
//     pub start_time: std::time::Instant,
//     pub metadata: HashMap<String, String>,
// }

// impl MiddlewareContext {
//     pub fn new() -> Self {
//         Self {
//             request_id: uuid::Uuid::new_v4().to_string(),
//             start_time: std::time::Instant::now(),
//             metadata: HashMap::new(),
//         }
//     }

//     pub fn set_metadata(&mut self, key: String, value: String) {
//         self.metadata.insert(key, value);
//     }

//     pub fn get_metadata(&self, key: &str) -> Option<&String> {
//         self.metadata.get(key)
//     }
// }

// /// 中间件管理器
// pub struct MiddlewareManager {
//     middlewares: Vec<Box<dyn Middleware>>,
// }

// impl MiddlewareManager {
//     pub fn new() -> Self {
//         Self {
//             middlewares: Vec::new(),
//         }
//     }

//     pub fn add<M>(&mut self, middleware: M) 
//     where 
//         M: Middleware + 'static 
//     {
//         self.middlewares.push(Box::new(middleware));
//     }

//     pub fn sort_by_priority(&mut self) {
//         self.middlewares.sort_by(|a, b| b.priority().cmp(&a.priority()));
//     }

//     /// 获取适用于特定请求的中间件
//     pub fn get_applicable_middlewares(&self, parts: &Parts) -> Vec<&dyn Middleware> {
//         self.middlewares
//             .iter()
//             .filter(|m| m.focus(parts))
//             .map(|m| m.as_ref())
//             .collect()
//     }
// }

// /// 单个中间件的启动器
// pub struct LaunchPad<M: Middleware> {
//     middleware: M,
// }

// impl<M: Middleware> LaunchPad<M> {
//     pub fn new(middleware: M) -> Self {
//         Self { middleware }
//     }

//     pub fn using(self, router: Router) -> Router {
//         // 这里可以实现具体的中间件应用逻辑
//         // 例如使用 tower 的 layer 系统
//         let _middleware = self.middleware; // 使用 middleware 避免警告
//         router
//     }
// }

// /// 中间件链执行器
// pub struct MiddlewareChain {
//     manager: MiddlewareManager,
// }

// impl MiddlewareChain {
//     pub fn new(manager: MiddlewareManager) -> Self {
//         Self { manager }
//     }

//     /// 执行中间件链
//     pub async fn execute(&self, mut request: Request) -> Result<Request, Response> {
//         let (parts, body) = request.into_parts();
//         let applicable_middlewares = self.manager.get_applicable_middlewares(&parts);
        
//         // 重新构建请求
//         request = Request::from_parts(parts, body);

//         // 按优先级顺序执行中间件
//         for middleware in applicable_middlewares {
//             match middleware.call(request).await {
//                 Ok(req) => request = req,
//                 Err(err) => return Err(err),
//             }
//         }

//         Ok(request)
//     }
// }

// /// 中间件构建器，用于链式配置
// pub struct MiddlewareBuilder {
//     manager: MiddlewareManager,
// }

// impl MiddlewareBuilder {
//     pub fn new() -> Self {
//         Self {
//             manager: MiddlewareManager::new(),
//         }
//     }

//     pub fn add<M>(mut self, middleware: M) -> Self 
//     where 
//         M: Middleware + 'static 
//     {
//         self.manager.add(middleware);
//         self
//     }

//     pub fn build(mut self) -> MiddlewareManager {
//         self.manager.sort_by_priority();
//         self.manager
//     }
// }

// /// 路径匹配辅助函数
// pub fn path_matches(pattern: &str, path: &str) -> bool {
//     if pattern == "*" {
//         return true;
//     }
    
//     if pattern.ends_with("/*") {
//         let prefix = &pattern[..pattern.len() - 2];
//         return path.starts_with(prefix);
//     }
    
//     pattern == path
// }

// /// 方法匹配辅助函数
// pub fn method_matches(allowed_methods: &[Method], request_method: &Method) -> bool {
//     allowed_methods.contains(request_method)
// }

// // 辅助函数：按优先级排序多个中间件
// pub fn sort_middlewares_by_priority<M: Middleware>(middlewares: &mut [M]) {
//     middlewares.sort_by(|a, b| b.priority().cmp(&a.priority()));
// }

// /// 示例：日志中间件
// pub struct LoggingMiddleware {
//     enabled: bool,
// }

// impl LoggingMiddleware {
//     pub fn new(enabled: bool) -> Self {
//         Self { enabled }
//     }
// }

// impl Middleware for LoggingMiddleware {
//     fn focus(&self, _parts: &Parts) -> bool {
//         self.enabled
//     }

//     fn priority(&self) -> i32 {
//         100 // 高优先级，最先执行
//     }

//     fn call(&self, request: Request) -> Pin<Box<dyn Future<Output = Result<Request, Response>> + Send + '_>> {
//         Box::pin(async move {
//             let method = request.method().clone();
//             let uri = request.uri().clone();
            
//             println!("Request: {} {}", method, uri);
            
//             Ok(request)
//         })
//     }

//     fn name(&self) -> &'static str {
//         "LoggingMiddleware"
//     }
// }

// #[cfg(test)]
// mod tests {
//     use super::*;
//     use axum::http::Method;

//     #[test]
//     fn test_path_matching() {
//         assert!(path_matches("*", "/any/path"));
//         assert!(path_matches("/api/*", "/api/users"));
//         assert!(path_matches("/api/users", "/api/users"));
//         assert!(!path_matches("/api/users", "/api/posts"));
//     }

//     #[test]
//     fn test_method_matching() {
//         let methods = vec![Method::GET, Method::POST];
//         assert!(method_matches(&methods, &Method::GET));
//         assert!(method_matches(&methods, &Method::POST));
//         assert!(!method_matches(&methods, &Method::DELETE));
//     }

//     #[test]
//     fn test_middleware_priority_sorting() {
//         let mut middlewares = vec![
//             LoggingMiddleware::new(true),
//             LoggingMiddleware::new(true),
//         ];
        
//         sort_middlewares_by_priority(&mut middlewares);
//         // 由于优先级相同，顺序保持不变
//         assert_eq!(middlewares.len(), 2);
//     }

//     #[tokio::test]
//     async fn test_middleware_chain() {
//         let manager = MiddlewareBuilder::new()
//             .add(LoggingMiddleware::new(true))
//             .build();
        
//         let chain = MiddlewareChain::new(manager);
        
//         // 这里需要创建一个测试请求
//         // let request = Request::builder()
//         //     .method(Method::GET)
//         //     .uri("/test")
//         //     .body(axum::body::Body::empty())
//         //     .unwrap();
        
//         // let result = chain.execute(request).await;
//         // assert!(result.is_ok());
//     }
// }
